js

{
	// Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	// {
	// 	"crear un slice de redux": {
	// 		key: "crear un slice de redux",
	// 		"prefix": "rdxSlice",
	// 		"body": [
	// 			"import { createSlice } from '@reduxjs/toolkit';",
	// 			"",
	// 			"export const ${1:${TM_FILENAME_BASE}} = createSlice({",
	// 			"  //nombre del slice con el que se vincula al store",
	// 			"  name: '${2:name}',",
	// 			"  //declaracion del estado inicial de las variables",
	// 			"  initialState: {",
	// 			"    counter: 0,",
	// 			"  },",
	// 			"	 //funciones que modifican el estado",
	// 			"  reducers: {",
	// 			"    ${3:increment}: (state) => {",
	// 			"      state.counter += 1;",
	// 			"    },",
	// 			"    decrement: (state) => {",
	// 			"      state.counter -= 1;",
	// 			"    },",
	// 			"		 //incremeta por una cantidad dada",
	// 			"    incrementByAmount: (state, action) => {",
	// 			"      state.counter += action.payload;",
	// 			"    },",
	// 			"  },",
	// 			"});",
	// 			"",
	// 			"export const { increment, decrement, incrementByAmount } = ${1:${TM_FILENAME_BASE}}.actions;",
	// 			"",
	// 		],
	// 		"description": "Crear un slice de redux"
	// 	}
	// },


	"React-Redux useDispatch": {
		"prefix": "useDispatch",
		"body": [
			"const dispatch = useDispatch();",
		],
		"description": "Crea el useDispatch de React Redux"
	},
	"React-Redux useSelector": {
		"prefix": "useSelector",
		"body": [
			"const state = useSelector( state => state );",
		],
		"description": "Crea el useSelector de React Redux"
	},
}

ts


{
	"custom url": {
		"prefix": "createcurl",
		"body": [
			"export const ${1:SUSCRIPCION} = \"/${2:suscripcion}\";",
			"",
			"export const ${1/(.*)/${1:capitalize}/}URL = {",
			"    get: `${$1}/search`,",
			"    getById: `${$1}/:id`,",
			"    post: `${$1}`,",
			"    patch: `${$1}/:id`,",
			"    delete: `${$1}/:id`",
			"};"
		],
		"description": "Snippet para generar las URLs de una entidad personalizada"
	},
	"custom service": {
		"prefix": "craetecservice",
		"body": [
			"import { Axios, cancelTokenSource } from '../../config/api/axios.config';",
			"import { ${1:Suscripcion}DeleteDTO, ${1}PatchDTO, ${1}PostDTO } from '../../model/dtos/${2: suscripcion}/${2}.dto';",
			"",
			"import { omitId, replaceParamId } from \"../../utilities/replace-param.utils\";",
			"import { ${1}URL } from '../url/${2}.url';",
			"",
			"const url = ${1}URL;",
			"class ${1} {",
			"    async get${1}Search() {",
			"        return await Axios.get(`${url.get}`, {",
			"            cancelToken: cancelTokenSource.token,",
			"        });",
			"    }",
			"    async get${1}ById(${1}Id: number) {",
			"        return await Axios.get(replaceParamId(url.getById, ${1}Id), {",
			"            cancelToken: cancelTokenSource.token,",
			"        });",
			"    }",
			"    async post${1}(req: ${1}PostDTO) {",
			"        return await Axios.post(url.post, req, {",
			"            cancelToken: cancelTokenSource.token,",
			"        });",
			"    }",
			"    async patch${1}(req: ${1}PatchDTO) {",
			"        return await Axios.patch(replaceParamId(url.patch, req.id), omitId(req), {",
			"            cancelToken: cancelTokenSource.token,",
			"        });",
			"    }",
			"    async delete${1}(${1}Id: ${1}DeleteDTO) {",
			"        return await Axios.delete(replaceParamId(url.delete, ${1}Id.id), {",
			"            cancelToken: cancelTokenSource.token,",
			"        });",
			"    }",
			"}",
			"",
			"export const ${1}Api = new ${1}();"
		],
		"description": "Snippet para reemplazar todas las instancias de Suscripcion con un nombre nuevo"
	},
}


tsx

{
	
	"CustomTable": {
    "prefix": "createctable",
    "body": [
      "import { t } from \"i18next\";",
      "import CustomBasicTable from \"../../../common/components/table/basic-table/CustomBasicTable\";",
      "import { ICustomColumnItem } from \"../../../common/components/table/basic-table/interfaces/custombasictable\";",
      "import { lang } from \"../../../langs\";",
      "",
      "interface Props {",
      "    data: any;",
      "    isFetching: boolean;",
      "    handleDelete: any;",
      "}",
      "export const Table${1:Name} = ({ data, isFetching, handleDelete }: Props) => {",
      "    const columns: ICustomColumnItem[] = [",
      "        { field: 'id', header: 'ID', sortable: true, filter: true, filterPlaceholder: 'Buscar Por ID', dataType: 'text' },",
      "    ];",
      "",
      "    return (",
      "        <>",
      "            <CustomBasicTable",
      "                data={data.data}",
      "                loading={isFetching}",
      "                columns={columns}",
      "                tableTitle={t(lang.${2:langKey}.subTitle)}",
      "                handleDelete={handleDelete}",
      "                filterDisplay={'row'}",
      "                rowsPerPageOptions={[10, 100, 1000]}",
      "                rows={10}",
      "            />",
      "        </>",
      "    );",
      "};"
    ],
    "description": "Snippet para reemplazar el nombre del componente y del idioma"
  },
	"CustomComponent": {
		"prefix": "createccomponent",
		"body": [
			"import { t } from \"i18next\";",
			"import { useState } from \"react\";",
			"import toast from \"react-hot-toast\";",
			"import { CustomBasicModal } from \"../../common/components/modal/CustomBasicModal\";",
			"import ModalDelete from \"../../common/components/ModalDelete\";",
			"import { useModuleContext } from \"../../hooks/useModules\";",
			"import useQueryApi from \"../../hooks/useQueryApi\";",
			"import UseQueryMutation from \"../../hooks/useQueryMutation\";",
			"import { lang } from \"../../langs\";",
			"import { DashboardLayout } from \"../../layout/DashboardLayout\";",
			"",
			"import { ${1:Entity}Api } from \"../../services/${2:entity}/${2}.service\";",
			"import { Table${1} } from \"./components/Table${1}\";",
			"import Form${1} from \"./components/Form${1}\";",
			"",
			"const ${1} = () => {",
			"    const { rowData, startToolbarTemplate, visible } = useModuleContext();",
			"    const { data, isFetching, refetch } = useQueryApi<Response>(",
			"        \"${2}\",",
			"        ${1}Api.get${1}Search",
			"    );",
			"",
			"    const [showConfirmModal, setShowConfirmModal] = useState(false);",
			"    const [deleteId, setDeleteId] = useState<number | null>(null);",
			"",
			"    const delete${1} = UseQueryMutation({",
			"        requestFn: ${1}Api.delete${1},",
			"        options: {",
			"            onError() {",
			"                toast.error(t(lang.${3:langKey}.messages.deletedError));",
			"            },",
			"            onSuccess: () => {",
			"                refetch();",
			"                toast.success(t(lang.${3:langKey}.messages.deletedSuccess));",
			"            },",
			"        },",
			"    });",
			"",
			"    const handleDelete = (id: number) => {",
			"        setDeleteId(id);",
			"        setShowConfirmModal(true);",
			"    };",
			"",
			"    const confirmDelete = async () => {",
			"        if (deleteId !== null) {",
			"            const req = { id: deleteId };",
			"            await delete${1}.mutateAsync(req);",
			"            setShowConfirmModal(false);",
			"            setDeleteId(null);",
			"        }",
			"    };",
			"",
			"    const cancelDelete = () => {",
			"        setShowConfirmModal(false);",
			"        setDeleteId(null);",
			"    };",
			"",
			"    return (",
			"        <DashboardLayout>",
			"            <div className='text-3xl mt-2 mb-2'>",
			"                {t(lang.${3}.title)}",
			"            </div>",
			"            <div className=\"card\">",
			"                <div className=\"grid\">",
			"                    <div className=\"col-12\">",
			"                        {startToolbarTemplate()}",
			"                    </div>",
			"                </div>",
			"                <div>",
			"                    <Table${1}",
			"                        data={data ?? []}",
			"                        isFetching={isFetching}",
			"                        handleDelete={handleDelete}",
			"                    />",
			"                </div>",
			"            </div>",
			"            <CustomBasicModal title={rowData ? `${t(lang.${3}.edit)}` : `${t(lang.${3}.new)}`}>",
			"                {visible && (<Form${1} refetch={refetch} />)}",
			"            </CustomBasicModal>",
			"            {",
			"                showConfirmModal && (",
			"                    <ModalDelete",
			"                        visible={showConfirmModal}",
			"                        onHide={cancelDelete}",
			"                        onConfirm={confirmDelete}",
			"                    >",
			"                        <p>{t(lang.${3}.messages.deletedSuccess)}</p>",
			"                    </ModalDelete>",
			"                )",
			"            }",
			"        </DashboardLayout>",
			"    );",
			"};",
			"",
			"export default ${1};"
		],
		"description": "Snippet para reemplazar el nombre del componente, del servicio y del idioma"
	},
	"CustomForm": {
		"prefix": "createcform",
		"body": [
			"import { Formik } from \"formik\"",
			"import { t } from \"i18next\"",
			"import toast from \"react-hot-toast\"",
			"import { useModuleContext } from \"../../../hooks/useModules\"",
			"import UseQueryMutation from \"../../../hooks/useQueryMutation\"",
			"import { lang } from \"../../../langs\"",
			"import { ${1:Entity}PatchDTO, ${1}PostDTO } from \"../../../model/dtos/${2:entity}/${2}.dto\"",
			"import { ${1}Api } from \"../../../services/${2}/${2}.service\"",
			"import { fieldValidations } from \"../field/field.validations\"",
			"import FormFields from \"./FormFields\"",
			"",
			"interface FormTypeActionsProps {",
			"    refetch: () => void;",
			"}",
			"const Form${1}: React.FC<FormTypeActionsProps> = ({ refetch }) => {",
			"    const { setRowData, rowData, visible, setVisible } = useModuleContext();",
			"    const post${1} = UseQueryMutation({",
			"        requestFn: ${1}Api.post${1},",
			"        options: {",
			"            onError() {",
			"                toast.error(t(lang.${3:langKey}.messages.createdError))",
			"            },",
			"            onSuccess: () => {",
			"                toast.success(t(lang.${3}.messages.createdSuccess))",
			"                setVisible(!visible)",
			"                refetch()",
			"            },",
			"        },",
			"    })",
			"",
			"    const patch${1} = UseQueryMutation({",
			"        requestFn: ${1}Api.patch${1},",
			"        options: {",
			"            onError() {",
			"                toast.error(t(lang.${3}.messages.updatedError))",
			"            },",
			"            onSuccess: () => {",
			"                toast.success(t(lang.${3}.messages.updatedSuccess))",
			"                setVisible(!visible)",
			"                setRowData('');",
			"                refetch()",
			"            },",
			"        },",
			"    })",
			"",
			"    const initialValues: ${1}PostDTO = {",
			"        nombre: rowData?.nombre ?? \"\",",
			"        descripcion: rowData?.descripcion ?? \"\",",
			"        sistema: rowData?.sistema ?? \"\",",
			"    }",
			"",
			"    const onSave = async (values: ${1}PostDTO) => {",
			"        if (rowData) {",
			"            const req: ${1}PatchDTO = {",
			"                id: rowData.id,",
			"                ...values,",
			"            }",
			"            return await patch${1}.mutateAsync(req)",
			"        }",
			"        await post${1}.mutateAsync(values)",
			"    }",
			"    return (",
			"        <Formik",
			"            initialValues={initialValues}",
			"            validationSchema={fieldValidations}",
			"            onSubmit={(values, { setSubmitting }) => {",
			"                onSave(values)",
			"                setSubmitting(false)",
			"            }}",
			"        >",
			"            <>",
			"                <FormFields />",
			"            </>",
			"        </Formik>",
			"    )",
			"}",
			"",
			"export default Form${1}"
		],
		"description": "Snippet para crear un formulario con un nombre de entidad genérico y claves de idioma personalizadas"
	},
	"CustomFormFields": {
		"prefix": "creatcfield",
		"body": [
			"import { Form, useFormikContext } from \"formik\";",
			"import { t } from \"i18next\";",
			"import { FC } from \"react\";",
			"import FormCustomButtons from \"../../../common/components/forms/FormCustomButtons\";",
			"import { FormTextInput } from \"../../../common/components/forms/FormTextInput\";",
			"import { lang } from \"../../../langs\";",
			"import { ${1:Entity}PostDTO } from \"../../../model/dtos/${2:entity}/${2}.dto\";",
			"",
			"const FormFields: FC = () => {",
			"    const { handleSubmit } = useFormikContext<${1}PostDTO>()",
			"",
			"    return (",
			"        <Form onSubmit={handleSubmit}>",
			"            <div className=\"p-fluid formgrid grid mb-3\">",
			"                <div className=\"col-12 md:col-6 lg:col-4\">",
			"                    <FormTextInput label={t(lang.${3:langKey}.labels.name)} name={'field'} />",
			"                </div>",
			"            </div>",
			"            <FormCustomButtons />",
			"        </Form>",
			"    )",
			"}",
			"",
			"export default FormFields"
		],
		"description": "Snippet para crear campos de formulario con un nombre de entidad genérico y claves de idioma personalizadas"
	}
}