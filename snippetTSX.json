{
    "custom table component": {
        "prefix": "createTableBasic",
        "body": [
            "import CustomBasicTable from \"@components/common/table/basic-table/CustomBasicTable\";",
            "import { ICustomColumnItem } from \"@components/common/table/basic-table/interfaces/custombasictable\";",
            "import { t } from \"i18next\";",
            "import { lang } from \"../../../../langs\";",
            "",
            "interface Props {",
            "    data: any;",
            "    isFetching: boolean;",
            "    handleDelete: any;",
            "}",
            "export const Table${1:ServiceName} = ({ data, isFetching, handleDelete }: Props) => {",
            "    const columns: ICustomColumnItem[] = [",
            "        { field: 'id', header: 'ID', sortable: true, filter: true, filterPlaceholder: 'Buscar Por ID', dataType: 'text' },",
            "    ];",
            "    return (",
            "        <>",
            "            <CustomBasicTable",
            "                data={data.data}",
            "                loading={isFetching}",
            "                columns={columns}",
            "                tableTitle={t(lang.${1}.subTitle)}",
            "                handleDelete={handleDelete}",
            "                filterDisplay={'row'}",
            "                rowsPerPageOptions={[10, 100, 1000]}",
            "                rows={10}",
            "            />",
            "        </>",
            "    );",
            "};"
        ],
        "description": "Snippet para crear un componente de tabla personalizado, reemplazando EspecieType con un nuevo nombre"
    },
    "custom tsx component": {
        "prefix": "createViewBasic",
        "body": [
            "import { useModuleContext } from \"@hooks/useModules\";",
            "import useQueryApi from \"@hooks/useQueryApi\";",
            "import UseQueryMutation from \"@hooks/useQueryMutation\";",
            "import { DashboardLayout } from \"@layout/DashboardLayout\";",
            "import { t } from \"i18next\";",
            "import { confirmDialog } from \"primereact/confirmdialog\";",
            "import toast from \"react-hot-toast\";",
            "import { lang } from \"../../langs\";",
            "import { ${1:ServiceName}Api } from \"./service/${2:serviceName}.service\";",
            "import { Table${1} } from \"./components/table/Table${1}\";",
            "import Form${1} from \"./components/form/Form${1}\";",
            "import { useEffect } from \"react\";",
            "",
            "",
            "const ${1}View = () => {",
            "  const { rowData, startToolbarTemplate, visible, resetModuleState } = useModuleContext();",
            "  const { data, isFetching, refetch } = useQueryApi<Response>(",
            "    \"${1}\",",
            "    ${1}Api.get${1}Search",
            "  );",
            "",
            "  useEffect(() => {",
            "    resetModuleState();",
            "  }, []);",
            "",
            "  const delete${1} = UseQueryMutation({",
            "    requestFn: ${1}Api.delete${1},",
            "    options: {",
            "      onError() {",
            "        toast.error(t(lang.${1}.messages.deletedError));",
            "      },",
            "      onSuccess: () => {",
            "        refetch();",
            "        toast.success(t(lang.${1}.messages.deletedSuccess));",
            "      },",
            "    },",
            "  });",
            "",
            "  const handleDelete = (id: number) => {",
            "    confirmDialog({",
            "      message: t(lang.common.labels.deleteMessage),",
            "      header: t(lang.common.labels.deleteMessageTitle),",
            "      icon: 'pi pi-exclamation-triangle text-yellow-500',",
            "      acceptClassName: 'p-button-danger',",
            "      acceptLabel: t(lang.common.actions.confirm),",
            "      rejectLabel: t(lang.common.actions.cancel),",
            "      accept: async () => {",
            "        await delete${1}.mutateAsync({ id });",
            "      },",
            "      reject: () => {",
            "        // Maneja la cancelaci√≥n si es necesario",
            "      },",
            "    });",
            "  };",
            "",
            "",
            "  return (",
            "    <DashboardLayout>",
            "      <div className='text-3xl mt-2 mb-2'>",
            "        {t(lang.${1}.title)}",
            "      </div>",
            "      <div className=\"card\">",
            "        {",
            "          visible ? (",
            "            <>",
            "              <Form${1}",
            "                title={rowData ? `${t(lang.${1}.edit)}` : `${t(lang.${1}.new)}`} refetch={refetch}",
            "              />",
            "            </>",
            "          )",
            "          : (",
            "            <div>",
            "              <div className=\"grid\">",
            "                <div className=\"col-12\">",
            "                  {startToolbarTemplate()}",
            "                </div>",
            "              </div>",
            "              <Table${1}",
            "                data={data ?? []}",
            "                isFetching={isFetching}",
            "                handleDelete={handleDelete}",
            "              />",
            "            </div>",
            "          )",
            "        }",
            "      </div>",
            "    </DashboardLayout>",
            "  );",
            "};",
            "",
            "export default ${1}View;"
        ],
        "description": "Snippet para crear un componente TSX, reemplazando EspecieType con un nuevo nombre"
    },
    "custom form component": {
        "prefix": "createFormBasic",
        "body": [
            "import { Formik } from \"formik\";",
            "import { t } from \"i18next\";",
            "import toast from \"react-hot-toast\";",
            "import { useModuleContext } from \"../../../../hooks/useModules\";",
            "import UseQueryMutation from \"../../../../hooks/useQueryMutation\";",
            "import { lang } from \"../../../../langs\";",
            "import { useCallback, useEffect } from \"react\";",
            "import { fieldValidations } from \"./fieldValidations/fieldvalidations\";",
            "import { Button } from \"primereact/button\";",
            "import { Message } from \"primereact/message\";",
            "import { ${1:ServiceName}Api } from \"@features/${2:serviceName}/service/${2}.service\";",
            "import { ${1}PatchDTO, ${1}PostDTO } from \"@features/${2}/model/dtos/${2}.dto\";",
            "import FormFields from \"./FormFields\";",
            "interface FormTypeActionsProps {",
            "    refetch: () => void;",
            "    title?: string;",
            "}",
            "const Form${1}: React.FC<FormTypeActionsProps> = ({ refetch, title = 'Titulo' }) => {",
            "    const { setRowData, rowData, visible, setVisible } = useModuleContext();",
            "",
            "    const post${1} = UseQueryMutation({",
            "        requestFn: ${1}Api.post${1},",
            "        options: {",
            "            onError: () => {",
            "                toast.error(t(lang.${1}.messages.createdError));",
            "            },",
            "            onSuccess: () => {",
            "                toast.success(t(lang.${1}.messages.createdSuccess));",
            "                setVisible(false);",
            "                setRowData(undefined);",
            "                refetch();",
            "            },",
            "        },",
            "    });",
            "",
            "    const patch${1} = UseQueryMutation({",
            "        requestFn: ${1}Api.patch${1},",
            "        options: {",
            "            onError: () => {",
            "                toast.error(t(lang.${1}.messages.updatedError));",
            "            },",
            "            onSuccess: () => {",
            "                toast.success(t(lang.${1}.messages.updatedSuccess));",
            "                setVisible(false);",
            "                setRowData(undefined);",
            "                refetch();",
            "            },",
            "        },",
            "    });",
            "",
            "    const onSave = useCallback(",
            "        async (values: ${1}PostDTO, { setSubmitting }) => {",
            "            try {",
            "                if (rowData) {",
            "                    const req: ${1}PatchDTO = {",
            "                        id: rowData.id,",
            "                        ...values,",
            "                    };",
            "                    await patch${1}.mutateAsync(req);",
            "                } else {",
            "                    await post${1}.mutateAsync(values);",
            "                }",
            "            } finally {",
            "                setSubmitting(false);",
            "            }",
            "        },",
            "        [rowData, patch${1}, post${1}]",
            "    );",
            "",
            "    useEffect(() => {",
            "        if (!visible) {",
            "            setRowData(undefined);",
            "        }",
            "    }, [visible, setRowData]);",
            "",
            "    const initialValues: ${1}PostDTO = {",
            "        nombre: rowData?.nombre ?? \"\",",
            "        descripcion: rowData?.descripcion ?? \"\",",
            "    };",
            "",
            "    return (",
            "        <>",
            "            <div className=\"grid mb-5\">",
            "                <div className=\"col-12\">",
            "                    <Button icon=\"pi pi-arrow-left\" rounded text onClick={() => { setVisible(false); setRowData(undefined); }} />",
            "                </div>",
            "                <div className=\"col-12\">",
            "                    {",
            "                        rowData ? (",
            "                            <Message severity=\"warn\" text={title} style={{",
            "                                width: '100%',",
            "                                fontSize: '900',",
            "                                height: '3rem'",
            "                            }} />",
            "                        ) : (",
            "                            <Message severity=\"info\" text={title} style={{",
            "                                width: '100%',",
            "                                fontSize: '900',",
            "                                height: '3rem'",
            "                            }} />",
            "                        )",
            "                    }",
            "                </div>",
            "            </div>",
            "            <Formik",
            "                initialValues={initialValues}",
            "                validationSchema={fieldValidations}",
            "                onSubmit={(values, { setSubmitting }) => {",
            "                    onSave(values, { setSubmitting });",
            "                }}",
            "            >",
            "                <>",
            "                    <FormFields />",
            "                </>",
            "            </Formik>",
            "        </>",
            "    );",
            "};",
            "",
            "export default Form${1};"
        ],
        "description": "Snippet para crear un formulario con Formik, reemplazando EspecieType con un nuevo nombre"
    },
    "custom form fields": {
        "prefix": "createFormFieldsBasic",
        "body": [
            "import { Form, useFormikContext } from \"formik\";",
            "import { t } from \"i18next\";",
            "import { FC } from \"react\";",
            "import { lang } from \"../../../../langs\";",
            "import { FormTextInput } from \"@components/common/forms/FormTextInput\";",
            "import FormCustomButtons from \"@components/common/forms/FormCustomButtons\";",
            "import { ${1:ServiceName}PostDTO } from \"@features/${2:serviceName}/model/dtos/${2}.dto\";",
            "",
            "const FormFields: FC = () => {",
            "    const { handleSubmit } = useFormikContext<${1}PostDTO>();",
            "",
            "    return (",
            "        <Form onSubmit={handleSubmit}>",
            "            <div className=\"p-fluid formgrid grid mb-3\">",
            "                <div className=\"col-12 md:col-6 lg:col-6\">",
            "                    <FormTextInput label={t(lang.${1}.form.name)} name={'nombre'} />",
            "                </div>",
            "                <div className=\"col-12 md:col-6 lg:col-6\">",
            "                    <FormTextInput label={t(lang.${1}.form.description)} name={'descripcion'} />",
            "                </div>",
            "            </div>",
            "            <FormCustomButtons />",
            "        </Form>",
            "    );",
            "};",
            "",
            "export default FormFields;"
        ],
        "description": "Snippet para crear campos de formulario reutilizables, reemplazando EspecieType con un nuevo nombre"
    },
    "createDynamicCrud": {
        "prefix": "createDynamicCrud",
        "body": [
            "import { fieldValidations } from \"./components/form/fieldValidations/field.validations\";",
            "import DynamicCrudPage from \"@components/common/cruds/DynamicCrudPage\";",
            "import { FieldConfig } from \"@components/common/forms/DynamicFormFields\";",
            "import { ICustomColumnItem } from \"@components/common/table/basic-table/interfaces/custombasictable\";",
            "",
            "const ${1:Feat}View = () => {",
            "  const formFields: FieldConfig[] = [",
            "    { name: \"title\", label: \"Titulo\", type: \"text\", gridSize: \"medium\" },",
            "  ];",
            "",
            "  const columns: ICustomColumnItem[] = [",
            "    { field: \"title\", header: \"Titulo\", sortable: true, filter: true, filterPlaceholder: \"Buscar por titulo\", dataType: \"text\" },",
            "  ];",
            "",
            "  return (",
            "    <DynamicCrudPage",
            "      moduleKey=\"${2:feat}\"",
            "      formFields={formFields}",
            "      columns={columns}",
            "      validationSchema={fieldValidations}",
            "    />",
            "  );",
            "};",
            "",
            "export default ${1:Feat}View;"
        ],
        "description": "Snippet para crear un CRUD din√°mico con DynamicCrudPage"
    }
}